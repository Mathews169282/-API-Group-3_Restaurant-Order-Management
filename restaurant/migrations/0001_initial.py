# Generated by Django 5.2.5 on 2025-08-15 14:22

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the category', max_length=80, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the category is currently available')),
            ],
            options={
                'verbose_name': 'Menu Category',
                'verbose_name_plural': 'Menu Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the customer's full name", max_length=100, validators=[django.core.validators.MinLengthValidator(2, 'Name must be at least 2 characters long')])),
                ('phone', models.CharField(help_text="Enter customer's phone number", max_length=15, validators=[django.core.validators.MinLengthValidator(10, 'Phone number must be at least 10 digits')])),
                ('email', models.EmailField(help_text="Enter customer's email address", max_length=100, unique=True, validators=[django.core.validators.EmailValidator(message='Enter a valid email address')])),
                ('address', models.TextField(blank=True, help_text="Customer's address (for delivery or billing)")),
                ('loyalty_points', models.PositiveIntegerField(default=0, help_text="Customer's loyalty points")),
                ('is_vip', models.BooleanField(default=False, help_text='Designates whether the customer is a VIP')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the customer')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='restaurant_customer_name_idx'), models.Index(fields=['email'], name='restaurant_customer_email_idx'), models.Index(fields=['phone'], name='restaurant_customer_phone_idx'), models.Index(fields=['is_vip'], name='restaurant_customer_vip_idx')],
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the menu item', max_length=120)),
                ('sku', models.CharField(help_text='Stock Keeping Unit - internal code for the item', max_length=40, unique=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in local currency', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('is_active', models.BooleanField(default=True, help_text='Whether this item is currently available')),
                ('description', models.TextField(blank=True, help_text='Optional description of the item')),
                ('category', models.ForeignKey(help_text='Category this item belongs to', on_delete=django.db.models.deletion.PROTECT, related_name='items', to='restaurant.menucategory')),
            ],
            options={
                'verbose_name': 'Menu Item',
                'verbose_name_plural': 'Menu Items',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('PREPARING', 'Preparing'), ('READY', 'Ready to Serve'), ('SERVED', 'Served'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], db_index=True, default='PENDING', help_text='Current status of the order', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Special instructions or requests for the order')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Sum of all order items before discounts and taxes', max_digits=10)),
                ('discount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount amount (absolute value, not percentage)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total amount after discounts and taxes', max_digits=10)),
                ('created_by', models.ForeignKey(help_text='Staff member who created the order', on_delete=django.db.models.deletion.PROTECT, related_name='restaurant_orders_created', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(help_text='Customer who placed the order', on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='restaurant.customer')),
                ('served_by', models.ForeignKey(blank=True, help_text='Staff member who served the order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders_served', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_manage_orders', 'Can create, update, and delete orders'), ('can_view_reports', 'Can view order reports and analytics')],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item_name', models.CharField(help_text='Name of the item at the time of ordering', max_length=120)),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at the time of ordering', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('qty', models.PositiveIntegerField(help_text='Quantity ordered', validators=[django.core.validators.MinValueValidator(1)])),
                ('notes', models.TextField(blank=True, help_text='Special instructions for this item')),
                ('item', models.ForeignKey(blank=True, help_text='Menu item (null if item was deleted)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='restaurant.menuitem')),
                ('order', models.ForeignKey(help_text='Order this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='restaurant.order')),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('method', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Credit/Debit Card'), ('MOBILE', 'Mobile Payment'), ('OTHER', 'Other')], default='CASH', help_text='Payment method used', max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], default='COMPLETED', help_text='Payment status', max_length=10)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID or reference number from payment processor', max_length=120)),
                ('notes', models.TextField(blank=True, help_text='Additional payment details or notes')),
                ('order', models.ForeignKey(help_text='Order this payment is for', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='restaurant.order')),
                ('processed_by', models.ForeignKey(blank=True, help_text='Staff member who processed the payment', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('number', models.CharField(help_text='Table number or identifier', max_length=10, unique=True)),
                ('capacity', models.PositiveSmallIntegerField(default=2, help_text='Maximum number of people that can be seated')),
                ('status', models.CharField(choices=[('VACANT', 'Vacant'), ('OCCUPIED', 'Occupied'), ('RESERVED', 'Reserved'), ('CLEANING', 'Cleaning')], db_index=True, default='VACANT', help_text='Current status of the table', max_length=10)),
                ('location', models.CharField(blank=True, help_text="Physical location in the restaurant (e.g., 'Patio', 'Main Room')", max_length=50)),
            ],
            options={
                'ordering': ['number'],
                'indexes': [models.Index(fields=['number'], name='restaurant_table_number_idx'), models.Index(fields=['status'], name='restaurant_table_status_idx')],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='table',
            field=models.ForeignKey(help_text='Table where the order was placed', on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='restaurant.table'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['name'], name='restaurant_menuitem_name_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['sku'], name='restaurant_menuitem_sku_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='menuitem',
            unique_together={('category', 'name')},
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', 'created_at'], name='restaurant_order_status_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='resto_order_created_at_idx'),
        ),
    ]
